Note that the programs above perform simple mathematical operations. In a program math can be done on two types of variables: numbers and strings.

Numbers we are familiar with, math with strings less so.

    "Numbers come in two types in Python integer (1, 2, 3, ...) and float (1.1, 2.2, 3.14,. . .) with these two types of numbers we can do simple math, we will do complex math in another notebook."

Try changing the values of the variables a and b above and rerunning the code.  Of course you can do this math in your head or with a calculator but the power of computational physics is being able to do repetitive calculations quickly on large data sets.

There is something important to note when it comes to division to show this run the cells below "
  
Notice that both of these print functions have the same output unless you are running an older version of Python in which case they don't.  Older versions of Python round the division of integers and only show the decimal value when a float is used.


Now let’s look at math with string, a group of letter and/or numbers strung together."

Note that the last two lines of this code use a variable, name, and an output format that imbeds the variable output in a print function. The first % is used to tell Python where you want to place the variable, the second % tells Python what to put there, in this case the variable name.

One of the nice things about Python is that no matter what you do, you can't break the computer.  However, we can crash the program when we tell Python to do something it does not understand. Here is an example:
   
The output is an error, notice that the line with the error is indicated by an arrow (---->) and a line number, 4 in this case. The \"TypeError\" tells you what went wrong. Error codes are Python's way of telling you it doesn't understand what you are asking it to do. In this case adding an integer to a string. It then becomes the job of the programmer, you, to fix the error; again this is called debugging. In this case we could change the + to a * and see what happens. 

We have seen how % can be used in a statement, now we are going to look at an operator that we will be using to input a value and have it used as a variable.
   
In the program above the important line is two, which is an input line.  As you can see, by running the program, this line opens an input box that waits for a radius value to be entered. Whatever value is input is assigned to the variable rad and then used in the rest of the program. When you rerun the program you can find the area of many different circles by entering different radii.

Now it's your turn. In the code cell below write a program that computes and outputs the volume of a sphere where the radius is input by the user. The input and output should be in the form of a sentence. Once you have a working program click the save icon at the top of the screen. Don't forget to include comments.

Before you hand in this tutorial you will need to change its name using the following format <B> yourname_PH12_CT_1.ipynb</B> replace yourname with your first and last name.  Email me your tutorial at my school email account.
   


